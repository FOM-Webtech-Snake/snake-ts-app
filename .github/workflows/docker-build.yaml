name: Build and Push Docker Image

# Trigger the workflow on push to specific branches or when a tag is created.
on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'  # Match version tags like v1.0, v1.1.1, etc.
  pull_request:
    branches:
      - '**' # trigger on all branches

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Determine the version
      - name: Determine version
        id: version
        run: |
          CLEANUP="false"
          LATEST="false"
          BASE_VERSION=$(jq -r .version package.json)
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v(.+)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            LATEST="true"
          elif [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            VERSION="${BASE_VERSION}-${GITHUB_RUN_NUMBER}"
            LATEST="true"
            CLEANUP="true"
          else
            if [[ -n "${GITHUB_HEAD_REF}" ]]; then
              BRANCH_NAME="${GITHUB_HEAD_REF}"
            elif [[ "${GITHUB_REF}" =~ ^refs/heads/(.+)$ ]]; then
              BRANCH_NAME=${BASH_REMATCH[1]}
            else
              BRANCH_NAME="unknown"
            fi
          
            # Replace invalid characters with '-'
            BRANCH_NAME=${BRANCH_NAME//[^a-zA-Z0-9._-]/-}
            VERSION="${BASE_VERSION}-${BRANCH_NAME}-SNAPSHOT"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "LATEST=${LATEST}" >> $GITHUB_ENV
        env:
          GITHUB_RUN_NUMBER: ${{ github.run_number }}

      # Step 4: Log in to GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Build and push Docker image
      - name: Build and push Docker image
        run: |
          docker buildx create --use
          DOCKER_TAGS="ghcr.io/fom-webtech-snake/snake-ts-app:${{ env.VERSION }}"
          DOCKER_LATEST_TAG="ghcr.io/fom-webtech-snake/snake-ts-app:latest"
          if [ "${{ env.LATEST }}" = "true" ]; then
            DOCKER_TAGS="${DOCKER_TAGS},${DOCKER_LATEST_TAG}"
          fi
          docker buildx build --platform linux/amd64,linux/arm64 \
          --build-arg APP_VERSION=${{ env.VERSION }} \
          --tag $DOCKER_TAGS \
          --push .

  cleanup:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only run on main branch
    steps:
      # Step 1: Clean up older package versions
      - name: Delete old package versions
        uses: actions/delete-package-versions@v5
        with:
          owner: ${{ github.repository_owner }}
          package-name: "snake-ts-app"
          package-type: "container"
          min-versions-to-keep: 10
          delete-only-untagged-versions: "true"
          token: ${{ secrets.GITHUB_TOKEN }}
